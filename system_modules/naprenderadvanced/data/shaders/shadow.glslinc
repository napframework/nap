// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// NAP Shader include file

// Includes
#include "poissondisk.glslinc"

// Constants
const uint SHADOWMAP_QUAD = 0;
const uint SHADOWMAP_CUBE = 1;

const float SHADOW_POISSON_SPREAD = 768.0;


// Returns whether shadows are enabled in the specified light flag
bool hasShadow(uint flags)
{
	return ((flags >> 8) & 0xff) > 0;
}

// Returns the shadow map type which specifies what shadow sampler the light must use
uint getShadowMapType(uint flags)
{
	return ((flags >> 16) & 0xff);
}

// Returns the shadow sampler index
uint getShadowMapIndex(uint flags)
{
	return ((flags >> 24) & 0xff);
}

// Linearizes depth buffer value
float linearDepth(float depth, float near, float far)
{
	return (near * far) / (far - depth * (far - near));
}

// Delinearizes linear depth value 
float nonLinearDepth(float depth, float near, float far)
{
	return (far + near - 2.0 * near * far / depth) / (far - near);
}


// Shoots a ray from inside a unit cube in the specified direction.
// Returns the direction of the face it hits.
vec3 cubeFace(vec3 dir)
{
	const float ext = 0.5;
	vec3 face = vec3(1.0, 0, 0);

	float tmin = -ext / dir.x;
	float tmax = ext / dir.x;
	if (tmin > tmax) 
	{
		float temp = tmax;
		tmin = tmax;
		tmax = temp;
	}

	float tymin = -ext / dir.y;
	float tymax = ext / dir.y;
	if (tymin > tymax)
	{
		float temp = tymax;
		tymin = tymax;
		tymax = temp;
	}

	if (tymin > tmin) 
	{
		tmin = tymin;
		face = vec3(0, 1.0, 0);
	}

	if (tymax < tmax) 
		tmax = tymax;

	float tzmin = -ext / dir.z;
	float tzmax = ext / dir.z;
	if (tzmin > tzmax)
	{
		float temp = tzmax;
		tzmin = tzmax;
		tzmax = temp;
	}

	if (tzmin > tmin) 
	{
		tmin = tzmin;
		face = vec3(0, 0, 1.0);
	}

	if (tzmax < tmax)
		tmax = tzmax;
	
	// perp is perpendicular to the surface 
	face *= sign(dir);

	// tmin should always be positive as the intersection is in front of the origin of the ray
	//float dist = tmin;

	return face;
}


// SDF function of a plane, returns closest distance between point and plane
float sdfPlane(vec3 planeOrig, vec3 planeNormal, vec3 point)
{
	return dot(planeNormal, point - planeOrig);
}


// Calculate shadow contribution
// @param shadowCoord: the fragment position in light space
// @param lightDir: the light direction
float computeShadows(sampler2DShadow shadowMaps[8], vec4 shadowCoords[8], uint flags[8], uint count, uint sampleCount)
{
	float result = 0.0;
	for (uint i = 0; i < count; i++)
	{
		if (!hasShadow(flags[i]))
			continue;

		// Perspective divide and map coordinates to [0.0, 1.0] range
		vec3 coord = ((shadowCoords[i].xyz / shadowCoords[i].w) + 1.0) * 0.5;
		float bias = 1.0/textureSize(shadowMaps[i], 0).x;
		float comp = coord.z - bias;

		// Multi sample
		float shadow = 0.0;
		for (int s=0; s<sampleCount; s++) 
		{
			shadow += 1.0 - texture(shadowMaps[i], vec3(coord.xy + POISSON_DISK[s]/SHADOW_POISSON_SPREAD, comp));
		}
		result = max(shadow / float(sampleCount), result);
	}

	return clamp(result, 0.0, 1.0);
}


float computeShadow(sampler2DShadow shadowMap, vec4 shadowCoord, uint sampleCount)
{
	// Perspective divide and map coordinates to [0.0, 1.0] range
	vec3 coord = ((shadowCoord.xyz / shadowCoord.w) + 1.0) * 0.5;
	float bias = 1.0/textureSize(shadowMap, 0).x;
	float comp = coord.z - bias;

	// Multi sample
	float shadow = 0.0;
	for (int s=0; s<sampleCount; s++) 
	{
		shadow += 1.0 - texture(shadowMap, vec3(coord.xy + POISSON_DISK[s]/SHADOW_POISSON_SPREAD, comp));
	}
	return clamp(shadow / float(sampleCount), 0.0, 1.0);
}


float computeShadow(sampler2DShadow shadowMap, vec4 shadowCoord, vec3 lightDir, vec3 surfNormal, uint sampleCount)
{
	// Perspective divide and map coordinates to [0.0, 1.0] range
	vec3 coord = ((shadowCoord.xyz / shadowCoord.w) + 1.0) * 0.5;

	float incidence = 1.0 - clamp(dot(surfNormal, -lightDir), 0.0, 1.0);
	//float bias = 1.0/textureSize(shadowMap, 0).x * pow(incidence, 0.25);
	float bias = 0.0005 * incidence;
	float comp = coord.z - bias;

	// Multi sample
	float shadow = 0.0;
	for (int s=0; s<sampleCount; s++) 
	{
		shadow += 1.0 - texture(shadowMap, vec3(coord.xy + POISSON_DISK[s]/SHADOW_POISSON_SPREAD, comp));
	}
	return clamp(shadow / float(sampleCount), 0.0, 1.0);
}
