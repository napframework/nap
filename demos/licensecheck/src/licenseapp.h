/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#pragma once

// External Includes
#include <renderwindow.h>
#include <nap/resourcemanager.h>
#include <sceneservice.h>
#include <inputservice.h>
#include <renderservice.h>
#include <imguiservice.h>
#include <licenseservice.h>
#include <app.h>
#include <font.h>
#include <scene.h>

namespace nap
{
	using namespace rtti;

	/**
	 * Demo application that is called from within the main loop
	 *
	 * Shows how to verify a license, generated by the 'licensegenerator', using a public RSA key.
	 * The license generator creates and signs the license using a matching private key. 
	 * The keys are generated using the 'keygen' tool. 
	 *
	 * This system allows you to create a unique pair of keys that can be used to create
	 * licenses that are compatible with a specific NAP application. The public key
	 * is embedded in the application source code, the private key is kept secret. Only
	 * licenses created and signed with the private key are compatible with the 
	 * application, offering a good layer of protection.
	 *
	 * For demo purposes:
	 * The private key, used to create the license, is stored in the 'keys' directory.
	 * Normally you would never distribute the private key.
	 *
	 * The plain text and signed license is stored in the 'license' directory.
	 * On startup the nap::LicenseService looks for a license in a specific directory, which 
	 * defaults to: "{PROJECT_DIR}/license". On initialization the application checks 
	 * if it has a valid license. If not, a modal dialog is opened that notifies the user 
	 * there is no valid license. From there the user can only quit the application. 
	 *
	 * It is up to the developer to implement specific security measures based on license validity.
	 *
	 * Licenses can have expiration dates and additional tags. If the license is issued
	 * with an expiration date and that date passed the license is 'expired' and therefore invalid. 
	 * Tags can be used to add additional information to a license and use that information
	 * to enable / disable specific functionality. For example: an 'educational' license 
	 * might disable certain features.
	 *
	 * You can use the 'keygen' tool to create a new set of keys and the 'licensegenerator' tool
	 * to create and sign licenses. Feel free to play around with new keys and new licenses.
	 */
	class LicenseApp : public App
	{
		RTTI_ENABLE(App)
	public:
		LicenseApp(nap::Core& core) : App(core)	{ }

		/**
		 *	Initialize app specific data structures
		 */
		bool init(utility::ErrorState& error) override;
		
		/**
		 *	Update is called before render, performs all the app logic
		 */
		void update(double deltaTime) override;

		/**
		 *	Render is called after update
		 */
		void render() override;

		/**
		 *	Forwards the received window event to the render service
		 */
		void windowMessageReceived(WindowEventPtr windowEvent) override;
		
		/**
		 *  Forwards the received input event to the input service
		 */
		void inputMessageReceived(InputEventPtr inputEvent) override;
		
		/**
		 *	Called when loop finishes
		 */
		int shutdown() override;

	private:
		// Nap Services
		RenderService* mRenderService = nullptr;						//< Render Service that handles render calls
		ResourceManager* mResourceManager = nullptr;					//< Manages all the loaded resources
		SceneService* mSceneService = nullptr;							//< Manages all the objects in the scene
		InputService* mInputService = nullptr;							//< Input service for processing input
		IMGuiService* mGuiService = nullptr;							//< Manages gui related update / draw calls
		LicenseService* mLicenseService = nullptr;						//< The license service, used to validate app license
		ObjectPtr<RenderWindow> mRenderWindow;							//< Pointer to the render window		
		ObjectPtr<EntityInstance> mTextEntity = nullptr;				//< Pointer to the entity that can display text
		ObjectPtr<Scene> mScene = nullptr;								//< The scene that contains all entities and components
		LicenseInformation mLicenseInfo;								//< Contains license information after license validation
		utility::ErrorState mLicenseError;								//< Contains the error if license validation failed
		bool mLicenseValid = true;										//< If the app has a valid license

		// Handle license error popup
		void handleLicensePopup();
		bool mOpened = false;
	};
}
