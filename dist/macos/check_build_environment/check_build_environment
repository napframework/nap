#!/usr/bin/env python
import os
import subprocess
import sys
import termios
import tty

REQUIRED_MACOS_VERSION = '10.14'
REQUIRED_MACOS_VERSION_TITLE = 'Mojave'

def getch():
    """Read a char from the console; pause"""

    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        return sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)

def wait_for_return(txt):
    """Show text and wait for using pressing return"""
    if sys.version_info >= (3, 0):    
        input(txt)
    else:
        raw_input(txt)

def call(cmd, provide_exit_code=False):
    """Execute command and return stdout"""

    # print("Command: %s" % cmd)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (out, _) = proc.communicate()
    if provide_exit_code:
        return proc.returncode
    else:
        return str(out.strip())

def log_test_success(test_item, success):
    """Log a test success"""

    print("Checking %s: %s" % (test_item, 'PASS' if success else 'FAIL'))

def read_yes_no(question):
    """Read a yes/no answer for a question"""

    yes = ('yes','y', 'ye', '')
    no = ('no','n')
     
    while True:
        prompt = question + ' [Y/n] '
        if sys.version_info >= (3, 0):
            choice = input(prompt)
        else:
            choice = raw_input(prompt)
        choice = choice.lower().strip()
        if choice in yes:
           return True
        elif choice in no:
           return False
        else:
           print("Please respond with 'yes' or 'no'\n")

def check_arch():
    """Check if the we're running on a 64bit machine"""

    arch = call('getconf LONG_BIT')
    arch_ok = arch == '64'
    log_test_success('x86-64 architecture', arch_ok)
    return arch_ok

def check_macos():
    """Check if the we're running macOS High Sierra 10.13"""

    macos_version = call('sw_vers -productVersion')
    macos_version_ok = macos_version.startswith(REQUIRED_MACOS_VERSION)
    log_test_success('macOS %s' % REQUIRED_MACOS_VERSION_TITLE, macos_version_ok)
    return macos_version_ok    

def check_xcode_installed():
    """Check if the Xcode is installed"""

    xcode_installed = False
    xcode_bundle_id = call('osascript -e "id of application \\"Xcode\\""')
    if xcode_bundle_id != '':
        xcode_installed_path = call('osascript -e "tell application \\"Finder\\" to POSIX path of (get application file id \\"%s\\" as alias)"' % xcode_bundle_id)
        xcode_installed = xcode_installed_path != ''
    log_test_success('Xcode installed', xcode_installed)
    return xcode_installed

def handle_missing_xcode():
    """Assist with Xcode installation"""

    print("\nXcode is not installed.")
    install_xcode = read_yes_no("Open download page?")
    if install_xcode:
        print("Opening Xcode download page...")
        call('open \'https://itunes.apple.com/us/app/xcode/id497799835?mt=12\'')
        wait_for_return("Press return when Xcode has been installed: ")
        re_run_tests = True
    else:
        print("Xcode not installed. Re-run checkBuildEnvironment once Xcode is installed.")
        re_run_tests = False
    return re_run_tests

def check_xcode_command_line_tools_installed():
    """Check if the Xcode Command Line Tools are installed"""

    cli_tools_installed = False

    xcode_select_location = call('which xcode-select')
    sane_xcode_select = xcode_select_location != ''

    if sane_xcode_select:
        xcode_select_path = call('xcode-select --print-path')
        if xcode_select_path != '' and os.path.isdir(xcode_select_path):
            cli_tools_installed = True
    log_test_success('Xcode command line tools installed', cli_tools_installed)
    return cli_tools_installed

def handle_missing_xcode_command_line_tools():
    """Assist with Xcode Command Line Tools installation"""

    print("\nXcode Command Line Tools are not installed.")
    install_command_line_tools = read_yes_no("Kick off installation?")
    if install_command_line_tools:
        call('xcode-select --install')
        wait_for_return("Press return once the installation has completed: ")
        re_run_tests = True
    else:
        print("Xcode Command Line Tools not installed. Re-run checkBuildEnvironment once they have been setup.")
        re_run_tests = False
    return re_run_tests

def xcode_license_accepted():
    """Attempt to check if the Xcode license has been accepted"""

    license_ok = call('xcrun -find c++', True) == 0
    log_test_success('Xcode license accepted', license_ok)
    return license_ok

def handle_xcode_license_approval():
    """Assist with Xcode unaccepted license"""

    print("\nThe Xcode license does not appear to have been accepted.  You can accept it by launching Xcode for the first time.")
    open_xcode = read_yes_no("Launch Xcode for first-time setup?")
    if open_xcode:
        subprocess.call('open -a Xcode', shell=True)
        wait_for_return("When the setup is complete Xcode and press return: ")
        re_run_tests = True
    else:
        print("The Xcode license agreement does not appear to have been accepted.  Re-run checkBuildEnvironment once you have accepted it.")
        re_run_tests = False
    return re_run_tests

def check_build_environment():
    """Check whether macOS build environment appears ready for NAP"""

    # Check if 64bit
    arch_ok = check_arch()
    if not arch_ok:
        print("\nNAP only supports x86-64 systems. Not continuing checks.")
        sys.exit(1)

    # Check macOS version
    macos_version_ok = check_macos()

    # Check if Xcode installed (without triggering installation)
    xcode_installed = check_xcode_installed()

    # Check if Xcode command line tools are installed
    xcode_cli_tools_installed = check_xcode_command_line_tools_installed()

    # Check if the Xcode license has been accepted
    xcode_license_ok = xcode_installed and xcode_cli_tools_installed and xcode_license_accepted()

    print("")

    # If everything looks good log and exit
    if macos_version_ok and xcode_installed and xcode_cli_tools_installed:
        print("Your build environment appears to be ready for NAP!")
        return False

    print("Some issues were encountered:")

    # Warn about wrong macOS version
    if not macos_version_ok:
        print("\nWarning: This version of NAP is supported on macOS %s (%s). Other macOS versions may work but are unsupported." 
              % (REQUIRED_MACOS_VERSION_TITLE, REQUIRED_MACOS_VERSION))

    # If Xcode isn't installed assist in installation
    if not xcode_installed:
        return handle_missing_xcode()

    # If we don't have Xcode Command Line Tools help install it
    if not xcode_cli_tools_installed:
        return handle_missing_xcode_command_line_tools()

    # If they don't seem to have accepted the Xcode license agreement offer to show it
    if not xcode_license_ok:
        return handle_xcode_license_approval()

    # We might fall through here if the only issue they have is their macOS version
    return False

if __name__ == '__main__':
    # Re-run our test sequence as need be as dependencies are installed
    while check_build_environment():
        print("Re-running checks")

    print("\nPress key to close...")
    getch()
