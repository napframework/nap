#!/usr/bin/env python
import os
import subprocess
import sys
import termios
import tty

REQUIRED_MACOS_VERSION = '10.13'
CMAKE_MIN_VERSION = (3, 5)

def getch():
    """Read a char from the console; pause"""

    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        return sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)

def call(cmd):
    """Execute command and return stdout"""

    # print("Command: %s" % cmd)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (out, _) = proc.communicate()
    return out.strip()

def log_test_success(test_item, success):
    """Log a test success"""

    print("Checking %s: %s" % (test_item, 'PASS' if success else 'FAIL'))

def check_arch():
    """Check if the we're running on a 64bit machine"""

    arch = call('getconf LONG_BIT')
    # arch = '32'
    arch_ok = arch == '64'
    log_test_success('x86-64 architecture', arch_ok)
    return arch_ok

def check_macos():
    """Check if the we're running macOS High Sierra 10.13"""

    macos_version = call('sw_vers -productVersion')
    # macos_version = '10.12.2'
    macos_version_ok = macos_version.startswith(REQUIRED_MACOS_VERSION)
    log_test_success('macOS High Sierra', macos_version_ok)
    return macos_version_ok    

def check_cmake():
    """Check if the CMake >= 3.5 is installed"""

    # Check if installed
    cmake_ok = False
    cmake_location = call('which cmake')
    cmake_installed = cmake_location != ''

    # Check version >= 3.5
    if cmake_installed:
        cmake_version = call('cmake --version | grep version')
        chunks = cmake_version.strip().split()
        (major, minor, patch) = chunks[2].split('.')
        cmake_ok = int(major) == CMAKE_MIN_VERSION[0] and int(minor) >= CMAKE_MIN_VERSION[1]

    # cmake_ok = False
    log_test_success('CMake >= 3.5', cmake_ok)
    return cmake_ok

def check_xcode_installed():
    """Check if the Xcode is installed"""

    xcode_installed = False
    xcode_bundle_id = call('osascript -e "id of application \\"Xcode\\""')
    if xcode_bundle_id != '':
        xcode_installed_path = call('osascript -e "tell application \\"Finder\\" to POSIX path of (get application file id \\"%s\\" as alias)"' % xcode_bundle_id)
        xcode_installed = xcode_installed_path != ''
    # xcode_installed = False
    log_test_success('Xcode installed', xcode_installed)
    return xcode_installed

def check_xcode_command_line_tools_installed():
    """Check if the Xcode Command Line Tools are installed"""

    cli_tools_installed = False

    xcode_select_location = call('which xcode-select')
    sane_xcode_select = xcode_select_location != ''

    if sane_xcode_select:
        xcode_select_path = call('xcode-select --print-path')
        if xcode_select_path != '' and os.path.isdir(xcode_select_path):
            cli_tools_installed = True
    log_test_success('Xcode command line tools installed', cli_tools_installed)
    return cli_tools_installed

def read_yes_no(question):
    """Read a yes/no answer for a question"""

    yes = ('yes','y', 'ye', '')
    no = ('no','n')
     
    while True:
        choice = raw_input(question + ' [Y/n] ').lower().strip()
        if choice in yes:
           return True
        elif choice in no:
           return False
        else:
           print("Please respond with 'yes' or 'no'\n")

def check_build_environment():
    """Check whether macOS build environment appears ready for NAP"""

    # Check if 64bit
    arch_ok = check_arch()
    if not arch_ok:
        print("\nNAP only supports x86-64 systems. Not continuing checks.")
        sys.exit(1)

    # Check macOS version
    macos_version_ok = check_macos()

    # Check if Xcode installed (without triggering installation)
    xcode_installed = check_xcode_installed()

    # Check if Xcode command line tools are installed
    xcode_cli_tools_installed = xcode_installed and check_xcode_command_line_tools_installed()

    # Check CMake
    cmake_ok = check_cmake()

    print("")

    # If everything looks good log and exit
    if macos_version_ok and xcode_cli_tools_installed and cmake_ok:
        print("Your build environment appears to be ready for NAP!")
        return

    print("Some issues were encountered:")

    # Warn about wrong macOS version
    if not macos_version_ok:
        print("\nWarning: This version of NAP is supported on macOS High Sierra (10.13). Other macOS versions may work but are unsupported.")

    # If we don't have Xcode Command Line Tools help install it
    if not xcode_cli_tools_installed:
        if xcode_installed:        
            print("\nXcode is installed but the Xcode Command Line Tools are not.")
        else:
            print("\nXcode and its Command Line Tools are not installed.")
        install_xcode = read_yes_no("Kick off installation?")
        if install_xcode:
            print("Triggering installation. Re-run checkBuildEnvironment once the installation has completed.")
            call('xcode-select --install')
        else:
            print("Xcode not installed. Re-run checkBuildEnvironment once Xcode is installed.")

    # If we don't CMake >= 3.5 provide help for installing it
    if not cmake_ok:
        print("\nCMake version 3.5 or higher is required. CMake can be downloaded from https://cmake.org/download/ or installed via Homebrew.")
        print("Re-run checkBuildEnvironment once CMake is installed.")

if __name__ == '__main__':
    check_build_environment()
    print("Press key to close...")
    getch()